<Project>

    <!-- Transforms the MavenReference item group into MavenReferenceItem items. -->
    <Target Name="GetMavenReferenceItemsFromPackageReferences" DependsOnTargets="ResolvePackageAssets">
        <ItemGroup>
            <!-- Best option is probably going to be to dig through project.assets.json for the relevant resources and packages. -->
            <!--
            <MavenReferenceItem Include="TODO">
                <ReferenceSource>PackageReference</ReferenceSource>
            </MavenReferenceItem>-->
        </ItemGroup>
    </Target>

    <!-- Obtains MavenReferenceItem items from child projects. -->
    <Target Name="GetMavenReferenceItemsFromProjectReferences" DependsOnTargets="PrepareProjectReferences">
        <MSBuild
            Projects="@(_MSBuildProjectReferenceExistent)"
            Targets="GetMavenReferenceItems"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)"
            Condition="'%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != ''"
            ContinueOnError="!$(BuildingProject)"
            RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)">
            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedMavenReferenceItemFromProjectReferences" />
        </MSBuild>
        <ItemGroup>
            <MavenReferenceItem Include="@(_ResolvedMavenReferenceItemFromProjectReferences)">
                <OriginalReferenceSource>%(ReferenceSource)</OriginalReferenceSource>
                <ReferenceSource>ProjectReference</ReferenceSource>
            </MavenReferenceItem>
        </ItemGroup>
        <Message Text="_ResolvedMavenReferenceItemFromProjectReferences: @(_ResolvedMavenReferenceItemFromProjectReferences)" />
    </Target>

    <!-- Transforms the MavenReference item group into MavenReferenceItem items. -->
    <Target Name="GetMavenReferenceItemsFromMavenReferences" Condition=" '@(MavenReference)' != '' ">
        <ItemGroup>
            <MavenReferenceItem Include="@(MavenReference)">
                <ReferenceSource>MavenReference</ReferenceSource>
            </MavenReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Populates the MavenReferenceItem set with required metadata. -->
    <Target Name="GetMavenReferenceItemsMetadata" DependsOnTargets="GetMavenReferenceItemsFromPackageReferences;GetMavenReferenceItemsFromProjectReferences;GetMavenReferenceItemsFromMavenReferences;" Condition=" '@(MavenReferenceItem)' != '' ">
        <!-- Probes for default metadata from the reference item. -->
        <MavenReferenceItemPrepare Items="@(MavenReferenceItem)">
            <Output TaskParameter="Items" ItemName="_MavenReferenceItemWithMetadata" />
        </MavenReferenceItemPrepare>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <MavenReferenceItem Remove="@(MavenReferenceItem)"/>
            <MavenReferenceItem Include="@(_MavenReferenceItemWithMetadata)" />
        </ItemGroup>
    </Target>

    <!-- PackageReferences come first, ProjectReferences come second, local MavenReferences come last. -->
    <PropertyGroup>
        <GetMavenReferenceItemsDependsOn>
            $(GetMavenReferenceItemsDependsOn);
            GetMavenReferenceItemsFromPackageReferences;
            PrepareProjectReferences;
            GetMavenReferenceItemsFromProjectReferences;
            GetMavenReferenceItemsFromMavenReferences;
            GetMavenReferenceItemsMetadata;
        </GetMavenReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Assembles the set of IkvmReferenceItems from various sources. -->
    <Target Name="GetMavenReferenceItems" DependsOnTargets="$(GetMavenReferenceItemsDependsOn)" Returns="@(MavenReferenceItem)">
        <Message Text="MavenReferenceItem: @(MavenReferenceItem)" />
    </Target>

    <!-- Transfers the MavenReferenceItem set into the collection of IkvmReferenceItem. -->
    <Target Name="_GetMavenIkvmReferenceItems" DependsOnTargets="GetMavenReferenceItems" Condition=" '@(MavenReferenceItem)' != '' ">
        <MavenReferenceItemResolve Items="@(MavenReferenceItem)">
            <Output TaskParameter="ResolvedItems" ItemName="_MavenIkvmReferenceItem"/>
        </MavenReferenceItemResolve>
        <ItemGroup>
            <IkvmReferenceItem Include="@(_MavenIkvmReferenceItem)">
                <ReferenceSource>MavenReference</ReferenceSource>
            </IkvmReferenceItem>
        </ItemGroup>
        <Message Text="IkvmReferenceItem: @(IkvmReferenceItem->'%(Compile)')" />
    </Target>

    <PropertyGroup>
        <GetMavenIkvmReferenceItemsDependsOn>
            $(GetMavenIkvmReferenceItemsDependsOn);
            GetMavenReferenceItems;
            _GetMavenIkvmReferenceItems;
        </GetMavenIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Resolves the MavenReferenceItem set into the collection of IkvmReferenceItem. -->
    <Target Name="GetMavenIkvmReferenceItems" DependsOnTargets="$(GetMavenIkvmReferenceItemsDependsOn)">

    </Target>

    <!-- Installs the resolved MavenReferenceItem into their respective paths. -->
    <Target Name="_InstallMavenReferences" DependsOnTargets="GetMavenIkvmReferenceItems">
        <MavenReferenceItemInstall Items="@(MavenReferenceItem)">

        </MavenReferenceItemInstall>
    </Target>

    <PropertyGroup>
        <InstallMavenReferencesDependsOn>
            $(InstallMavenReferencesDependsOn);
            GetMavenReferenceItems;
            _InstallMavenReferences;
        </InstallMavenReferencesDependsOn>
    </PropertyGroup>

    <!-- Installs the resolved MavenReferenceItem into their respective paths. -->
    <Target Name="InstallMavenReferences" DependsOnTargets="$(InstallMavenReferencesDependsOn)">

    </Target>

    <!-- Attach our target before GetIkvmReferenceItems. -->
    <PropertyGroup>
        <GetIkvmReferenceItemsDependsOn>
            GetMavenIkvmReferenceItems;
            $(GetIkvmReferenceItemsDependsOn);
        </GetIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Attach our target before CompileIkvmReferences. -->
    <PropertyGroup>
        <CompileIkvmReferencesDependsOn>
            InstallMavenReferences;
            $(CompileIkvmReferencesDependsOn);
        </CompileIkvmReferencesDependsOn>
    </PropertyGroup>

    <!-- Gets the MavenReferenceItems that will be emitted to the generated package. -->
    <Target Name="GetMavenReferenceItemsForProjectModelFromMavenReferences" DependsOnTargets="GetMavenReferenceItems">
        <ItemGroup>
            <MavenReferenceItemsForProjectModel Include="@(MavenReferenceItem->WithMetadataValue('ReferenceSource', 'MavenReference'))" />
        </ItemGroup>
    </Target>

    <!-- Default Maven packaging variables. -->
    <PropertyGroup>
        <MavenGroupdId Condition=" '$(MavenGroupId)' == '' ">ikvm.nuget</MavenGroupdId>
        <MavenArtifactId Condition=" '$(MavenArtifactId)' == '' ">$(PackageId)</MavenArtifactId>
        <MavenVersion Condition=" '$(MavenVersion)' == '' ">$(PackageVersion)</MavenVersion>
    </PropertyGroup>

    <!-- Outputs the project model file to the intermediate directory. -->
    <Target Name="_BuildMavenProjectModelPackageFile">
        <MavenWriteProjectObjectModelFile GroupId="$(MavenGroupdId)" ArtifactId="$(MavenArtifactId)" Version="$(MavenVersion)" References="@(MavenReferenceItemsForProjectModel)" PackageFile="$(IntermediateOutputPath)$(PackageId).pom">

        </MavenWriteProjectObjectModelFile>
    </Target>

    <PropertyGroup>
        <BuildMavenProjectModelPackageFileDependsOn>
            $(BuildMavenProjectModelPackageFile);
            GetMavenReferenceItemsForProjectModelFromMavenReferences;
            _BuildMavenProjectModelPackageFile;
        </BuildMavenProjectModelPackageFileDependsOn>
    </PropertyGroup>

    <!-- Outputs the project model file to the intermediate directory. -->
    <Target Name="BuildMavenProjectModelPackageFile" DependsOnTargets="$(BuildMavenProjectModelPackageFileDependsOn)">

    </Target>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GetMavenProjectModelPackageFile</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="GetMavenProjectModelPackageFile" DependsOnTargets="BuildMavenProjectModelPackageFile">
        <ItemGroup>
            <TfmSpecificPackageFile Include="$(IntermediateOutputPath)$(PackageId).pom" PackagePath="maven\$(TargetFramework)" />
        </ItemGroup>
    </Target>

</Project>
